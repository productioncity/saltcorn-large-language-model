/**
 * constants.js
 *
 * Shared constants and helpers for the Saltcorn Large-Language-Model plugin.
 * ----------------------------------------------------------------------------
 *  • Replaces the previous hard-coded OPENAI_MODELS array with a dynamic loader.
 *  • Model IDs are read from models-openai.json (generated by build-models.ts).
 *  • The export OPENAI_MODELS is retained for backwards-compatibility but now
 *    reflects the dynamically loaded list.
 *
 * Author:  Troy Kelly <troy@team.production.city>
 * Updated: 28 Apr 2025
 */

'use strict';

const fs   = require('fs');
const path = require('path');

/* -------------------------------------------------------------------------- */
/* 1.  Dynamic OpenAI model list                                              */
/* -------------------------------------------------------------------------- */

/**
 * Cache of the parsed model IDs so we only hit the filesystem once per
 * process-lifetime.
 * @type {string[] | null}
 */
let cachedModelIds = null;

/**
 * Load the list of model IDs supported by the UI.  Only models in the
 * “chat” or “inference” categories are exposed because they map to the
 * request payloads currently implemented by the plugin.
 *
 * @returns {string[]} Alphabetically sorted list of model IDs.
 */
function getOpenAIModelIds() {
  if (cachedModelIds) return cachedModelIds;

  try {
    const filePath = path.join(__dirname, 'models-openai.json');
    const raw      = fs.readFileSync(filePath, 'utf8');
    const { models } = JSON.parse(raw);

    cachedModelIds = (models || [])
      .filter((m) => ['chat', 'inference'].includes(m.category))
      .map((m) => m.id)
      .sort();

  } catch (error) {
    // On any failure (file missing, JSON parse, etc.) return an empty list so
    // the rest of the plugin can continue to load without interruption.
    cachedModelIds = [];
  }

  return cachedModelIds;
}

/**
 * Back-compat convenience constant.  Code that still imports
 *   const { OPENAI_MODELS } = require('./constants');
 * will transparently receive the live list.
 *
 * NOTE: New code should prefer `getOpenAIModelIds()` to avoid implying the
 *       list is static.
 */
const OPENAI_MODELS = getOpenAIModelIds();

/* -------------------------------------------------------------------------- */
/* 2.  Ollama model paths (unchanged)                                         */
/* -------------------------------------------------------------------------- */

/* eslint-disable camelcase */
const OLLAMA_MODELS_PATH = {
  Darwin:     `${process.env.HOME}/.ollama/models`,
  Linux:      '/usr/share/ollama/.ollama/models',
  Windows_NT: 'C:\\Users\\%username%\\.ollama\\models.',
};
/* eslint-enable camelcase */

/* -------------------------------------------------------------------------- */
/* 3.  Exports                                                                */
/* -------------------------------------------------------------------------- */

module.exports = {
  OPENAI_MODELS,          // Deprecated alias – kept for compatibility
  getOpenAIModelIds,      // Preferred API
  OLLAMA_MODELS_PATH,
};